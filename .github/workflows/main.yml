name: main

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: [local, faxmachine]
    outputs:
      image: ${{ steps.set-image.outputs.image }}
      push_latest: ${{ steps.prepare.outputs.push_latest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare tags
        id: prepare
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [ "$BRANCH" = "main" ]; then
            echo "push_latest=1" >> $GITHUB_OUTPUT
          else
            echo "push_latest=0" >> $GITHUB_OUTPUT
          fi

      - name: Fix DNS and add swap
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
          fi
          free -h

      - name: Show runner info
        run: |
          echo "Runner: $(hostname)"
          docker --version
          docker info

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Enable Docker layer caching
        run: |
          mkdir -p /tmp/.buildx-cache
          docker buildx create --use || true

      - name: Build Docker image (stable)
        run: |
          ( while sleep 30; do echo "Still building..."; done ) &
          KEEPALIVE=$!
          docker build \
            --progress=plain \
            --memory=2g --memory-swap=2g --cpus=2 \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t "${{ secrets.DOCKERHUB_USERNAME }}/s4s_cv:${SHORT_SHA}" .
          kill $KEEPALIVE
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Push image to Docker Hub
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/s4s_cv:${SHORT_SHA}"

      - name: Set image output
        id: set-image
        run: |
          echo "image=${{ secrets.DOCKERHUB_USERNAME }}/s4s_cv:${SHORT_SHA}" >> $GITHUB_OUTPUT

  push:
    needs: build
    runs-on: [self-hosted, linux]

    steps:
      - name: Show runner info
        run: |
          echo "Runner: $(hostname)"
          docker --version
          docker info

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull and push latest (only on main)
        if: needs.build.outputs.push_latest == '1'
        run: |
          IMAGE="${{ needs.build.outputs.image }}"
          REPO="${IMAGE%:*}"
          docker pull "$IMAGE"
          docker tag "$IMAGE" "${REPO}:latest"
          docker push "${REPO}:latest"

      - name: Output pushed image names
        run: |
          echo "Pushed image: ${{ needs.build.outputs.image }}"
          if [ "${{ needs.build.outputs.push_latest }}" = "1" ]; then
            echo "Pushed image: ${REPO}:latest"
          fi
