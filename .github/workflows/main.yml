name: main

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: [local, faxmachine]
    outputs:
      image: ${{ steps.set-image.outputs.image }}
      push_latest: ${{ steps.prepare.outputs.push_latest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean previous Docker images
        run: |
          echo "Cleaning previous Docker images from this workflow..."
          IMAGE_PATTERN="${{ secrets.DOCKERHUB_USERNAME }}/s4s_cv:*"
          # List images matching pattern
          EXISTING_IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^${IMAGE_PATTERN}" || true)
          if [ -n "$EXISTING_IMAGES" ]; then
            echo "$EXISTING_IMAGES" | xargs docker rmi -f
          else
            echo "No old images to remove"
          fi

      - name: Prepare tags
        id: prepare
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [ "$BRANCH" = "main" ]; then
            echo "push_latest=1" >> $GITHUB_OUTPUT
          else
            echo "push_latest=0" >> $GITHUB_OUTPUT

      - name: Show runner info
        run: |
          echo "Runner: $(hostname)"
          docker --version
          docker info

      - name: Build Docker image
        run: |
          ( while sleep 120; do echo "Still building..."; done ) &
          KEEPALIVE=$!
          docker build \
            --progress=plain \
            -t "${{ secrets.DOCKERHUB_USERNAME }}/s4s_cv:${SHORT_SHA}" .
          kill $KEEPALIVE


  push:
    needs: build
    runs-on: [self-hosted, linux]

    steps:
      - name: Show runner info
        run: |
          echo "Runner: $(hostname)"
          docker --version
          docker info

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tar
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Push SHA image
        run: docker push "${{ needs.build.outputs.image }}"

      - name: Tag and push latest (only on main)
        if: needs.build.outputs.push_latest == '1'
        run: |
          IMAGE="${{ needs.build.outputs.image }}"
          REPO="${IMAGE%:*}"
          docker tag "$IMAGE" "${REPO}:latest"
          docker push "${REPO}:latest"

      - name: Output pushed image names
        run: |
          echo "Pushed image: ${{ needs.build.outputs.image }}"
          if [ "${{ needs.build.outputs.push_latest }}" = "1" ]; then
            echo "Pushed image: ${REPO}:latest"
          fi
