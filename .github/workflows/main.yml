name: main

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: [local, dockermachine]
    outputs:
      image_tag: ${{ steps.set-image.outputs.image_tag }}
      push_latest: ${{ steps.prepare.outputs.push_latest }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare tags (do it before cleaning)
        id: prepare
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          BRANCH="${GITHUB_REF#refs/heads/}"
          if [ "$BRANCH" = "main" ]; then
            echo "push_latest=1" >> $GITHUB_OUTPUT
          else
            echo "push_latest=0" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}

      - name: Clean previous images of this repo only
        run: |
          echo "Cleaning previous images for ${DOCKERHUB_USERNAME}/s4s_cv except ${DOCKERHUB_USERNAME}/s4s_cv:${SHORT_SHA}"
          set -o pipefail || true
          IMAGE_PREFIX="${DOCKERHUB_USERNAME}/s4s_cv:"
          CURRENT_TAG="${IMAGE_PREFIX}${SHORT_SHA}"
          docker images --format '{{.Repository}}:{{.Tag}}' \
            | grep "^${IMAGE_PREFIX}" || true \
            | grep -v -x "${CURRENT_TAG}" || true \
            | xargs -r docker rmi -f || true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SHORT_SHA: ${{ env.SHORT_SHA }}

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub (needed for cache push/pull and push)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image with buildx and registry cache
        run: |
          SHORT_SHA=${SHORT_SHA:-${GITHUB_SHA::8}}
          IMAGE="${DOCKERHUB_USERNAME}/s4s_cv:${SHORT_SHA}"
          CACHE_REF="${DOCKERHUB_USERNAME}/s4s_cv:buildcache"
          echo "Building ${IMAGE}, using cache ${CACHE_REF}"
          docker buildx build \
            --tag "${IMAGE}" \
            --cache-from "type=registry,ref=${CACHE_REF}" \
            --cache-to "type=registry,ref=${CACHE_REF},mode=max,push=true" \
            --load \
            .
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SHORT_SHA: ${{ env.SHORT_SHA }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Push built image to Docker Hub
        run: |
          IMAGE="${DOCKERHUB_USERNAME}/s4s_cv:${SHORT_SHA}"
          echo "Pushing ${IMAGE}"
          docker push "$IMAGE"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SHORT_SHA: ${{ env.SHORT_SHA }}

      - name: Set image output (robust)
        id: set-image
        run: |
          SHORT_SHA="${SHORT_SHA:-${GITHUB_SHA::8}}"
          # export only the tag (non-secret). DOCKERHUB_USERNAME is a secret and must not be embedded in outputs.
          echo "image_tag=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SHORT_SHA: ${{ env.SHORT_SHA }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Prune buildx builder cache (keep recent + cap local storage)
        run: |
          # keep cache used in the last 3 days (72h), and cap local builder storage to ~10GiB
          docker buildx prune --filter "until=72h" --keep-storage 10737418240 --force --all || true

  deploy_remote:
    needs: build
    runs-on: [remote, s4shost]
    steps:
      - name: Checkout repository (for compose files)
        uses: actions/checkout@v4

      - name: Login to Docker Hub on remote runner
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image on remote runner
        run: |
          IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/s4s_cv:${{ needs.build.outputs.image_tag }}"
          echo "Pulling $IMAGE on remote"
          docker pull "$IMAGE"

      - name: Show loaded images (debug)
        run: |
          docker images --format "{{.Repository}}:{{.Tag}}\t{{.Size}}"

      - name: Run docker compose on remote (uses docker compose in repo root)
        run: |
          cd $GITHUB_WORKSPACE
          docker compose pull || true
          docker compose up -d --remove-orphans
